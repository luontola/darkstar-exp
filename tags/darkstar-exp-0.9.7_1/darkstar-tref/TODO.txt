
>> http://www.projectdarkstar.com/index.php?option=com_smf&Itemid=99999999&topic=367.0
>> Jackal von ÖRF on 16.3.2008 20:16:05

	Quote from: Jeff on Today at 19:13:47
	...integrate it such that BOTH models are available to the developer...

I'll do that. Already now a TransparentReference-enabled Darkstar Server 
allows working with both styles. But because the reference style choice 
affects all of the game code, using both styles in the same game may be 
complicated. I'll try to create some helper methods to make it easier to 
use both styles in the same game (for example an overloaded method 
DataManager.createReference(Object) which can convert a 
TransparentReference proxy object to a ManagedReference).

I'll publish the experimental branch when Darkstar 1.0 is released. The 
version numbers will be synced - for example experimental versions 1.0_1, 
1.0_2, 1.0_3 etc. are based on the codebase of Darkstar 1.0. Would 
"Darkstar EXP" (as in experimental, exponent and experience point) be a 
good name?

I might also think about something which allows breaking the "Never try to 
save a Manager Instance on a non-transient field of a Managed Object" rule 
in the Darkstar Server Tutorial, possibly enabling dependency injection. 
Others will be welcome to include their own modifications in the 
experimental distribution.


>> 17.3.2008

Muunna Darkstar EXP:n projektirakenne käyttämään Mavenia. Käynnistä 
palvelin bootloaderilla, joka lataa kaikki JAR:t lib-kansiosta 
automaattisesti (ei meta-inf -viittauksia). Pelien kirjastojen lataaminen 
myös automaattiseksi (apps -kansio ja application.properties -nimetty 
konffitiedosto joka alikansiossa).


>> 7.4.2008
>> http://www.projectdarkstar.com/index.php?option=com_smf&Itemid=99999999&topic=288.msg2426#msg2426

Recently it came to my mind, that garbace collection would be a perfect 
complement to TransparentReferences. You all are welcome to try adding GC 
to Darkstar EXP after Darkstar 1.0 is released. I'll also experiment with a 
declarative way of marking ManagedObjects modified - for example by adding 
@ReadWrite and/or @ReadOnly annotations to the ManagedObject's methods 
(depending on which one is the default for non-annotated methods). After 
that the concept of a ManagedReference should be completely decoupled from 
the code.
